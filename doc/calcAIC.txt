function res = calcAIC(self,kVect,machVect,varargin)
%  self.calcAIC function
%  calculates AIC for given reduced Frequencies and Mach
%  Numbers
%% Syntax
%   res = self.calcAIC(kVect,machVect)
%   res = self.calcAIC(__,varargin)
%% Input
%   Mandatory:
%       kVect       [double]    - Vector containing reduced Freq.
%       MachVect    [double]    - Vector containing mach number
%
%   Optional (Name-Value-Pair)
%       
%       Integration [string]    - Integration method: choose between
%                                   ["Parabolic" (default), "Quartic"]
%       Approximation [string]  - Approximation method: choose between
%                                   ["Watkins","Laschka"(default),"Desmarais"]
%       GSA         [double]    - Transformation matrix between Structure and AeroGrid 
%                               - only for describing the splines
%                               - orientation of coordinate system will not be taken into account in this matrix 
%                               - use CSChange property
%       plotKernel  [boolean]   - plots the kernel function 
%       verbose     [boolean]   - give detailed outout in console
%
%% Output
%   The output will be stored in a result structure and also be
%   added to the object's property obj.resultArray
%
%% Disclaimer
%   Copyright (c) 2021 Nils BÃ¶hnisch, Marc Bangel.
%
%   This file is part of DLMPro.
%
%   DLMPro is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   any later version. Also see the file "License"

%% Input Parser
p = inputParser;
addOptional(p,'Integration',"Parabolic",@(s) any(strcmpi(s,["Parabolic","Quartic"])));
addOptional(p,'Approximation',"Laschka",@(s) any(strcmpi(s,["Watkins","Laschka","Desmarais"])));
addOptional(p,'GSA',[]);
addOptional(p,'plotKernel',0)
addOptional(p,'verbose',0)
p.parse(varargin{:});

gsa      = p.Results.GSA;
int      = p.Results.Integration;
app      = p.Results.Approximation;
pkern    = p.Results.plotKernel;
dsp      = p.Results.verbose;

%% Initialize Variables
Ref_chord = self.wingProp.Ref_chord;  % reference chord of wing
totalNumberCases = length(kVect)*length(machVect);
if(isempty(gsa))
ndofAero = (self.wingProp.NC*self.wingProp.NS)*2;
gsa = eye(ndofAero);
Qss = zeros(ndofAero,ndofAero,totalNumberCases);
Qkk = zeros(ndofAero,ndofAero,totalNumberCases);
else
ndofAero = (self.wingProp.NC*self.wingProp.NS)*2;
[sn,an] = size(gsa);
Qss = zeros(sn,sn,totalNumberCases);
Qkk = zeros(an,an,totalNumberCases);
end

%% Calc Values
disp("--- START Calculation ---");
disp("   --- Integration: "+int);
disp("   --- Approximation: "+app);
pa = self.panelProp;
combi = zeros(totalNumberCases,2);
AIC = zeros(self.wingProp.NC*self.wingProp.NS,self.wingProp.NC*self.wingProp.NS,totalNumberCases);
n = 0;
for ma = 1:length(machVect)
for ki=1:length(kVect)
n = n+1;
mach = machVect(ma);
kr = kVect(ki);
combi(n,1) = kr;
combi(n,2) = mach;

kred = kr*2/Ref_chord; %form of the reduced frequency used for the DLM
D_vlm = VLM(pa,mach,dsp); %Get VLM downwash effect (steady state effect)
D_dlm = DLM(pa,mach,kred,int,app,pkern,dsp); %Get DLM downwash effect (oscillatory effect)

% combine VLM and DLM matrices
D = -(D_vlm+D_dlm);

% concatenate results to one wing
if self.SYM == 1
NS_hw = self.wingProp.NS;
NC = self.wingProp.NC;
D_r = D(NS_hw*NC+1:end,NS_hw*NC+1:end);   % influence from right wing on itself
D_lr = D(NS_hw*NC+1:end,1:NS_hw*NC);      % influence from left wing on right wing
sub_D_lr = zeros(NS_hw*NC,NC,n);

%sorting the influence matrix from left wing on
%right wing so that it can easily summed up with
%influnece from right wing on itself
m=1;
l = NS_hw;
for k=1:NS_hw
sub_D_lr(:,:,m) = D_lr(:,(k-1)*NC+1:k*NC);
m = m+1;
end

for k=1:NS_hw
new_D_lr(:,(k-1)*NC+1:k*NC) = sub_D_lr(:,:,l);
l = l - 1;
end

D = D_r+new_D_lr;
end
AIC(:,:,n) = inv(D);

%Calculate Derivation matrix W and Integration matrix B
[W,B] = DerivationIntegrationMatrix(kr,Ref_chord,pa);
if self.SYM == 1
W = W(ndofAero/2+1:end,ndofAero+1:end);
B = B(ndofAero+1:end,ndofAero/2+1:end);
end

W_total(:,:,n) = W;
% Calc QKK and Qhh
Qkk(:,:,n) = B*(D

% create coordinate Transform matrix to account 
% for different CS-Orientation in DLMpro(aero) and Struture

T = [self.T_CS self.T_CS; self.T_CS self.T_CS];
T([1,2,4,6],:) = [];
T(:,[1,2,4,6]) = [];

TR = zeros(size(gsa,2)/2);
for i = 1:size(TR,1)
s = 2*(i-1)+1;
TR(s:s+1,s:s+1) = T;
i=i+1;
end

QkkT = TR*Qkk(:,:,n)*TR;
Qss(:,:,n) = gsa*QkkT*gsa.';
end
end

res.Nr              = length(self.resultArray)+1;
res.kMList          = combi;
res.Qss             = Qss;
res.Qkk             = Qkk;
res.integration     = int;
res.approximation   = app;
res.VLM             = D_vlm;
res.AIC             = AIC;
res.GSA             = gsa;
res.B               = B;
res.W               = W_total;

self.resultArray{end+1,1} = res;
disp("--- Calculation Finished ---"+newline);
end
